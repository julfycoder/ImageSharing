//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImageSharing.FriendshipService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FriendshipService.IFriendshipService")]
    public interface IFriendshipService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipService/AddFriendship", ReplyAction="http://tempuri.org/IFriendshipService/AddFriendshipResponse")]
        void AddFriendship(ImageSharing.DAL.Entity.Friendship friendship);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipService/AddFriendship", ReplyAction="http://tempuri.org/IFriendshipService/AddFriendshipResponse")]
        System.Threading.Tasks.Task AddFriendshipAsync(ImageSharing.DAL.Entity.Friendship friendship);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipService/RemoveFriendship", ReplyAction="http://tempuri.org/IFriendshipService/RemoveFriendshipResponse")]
        void RemoveFriendship(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipService/RemoveFriendship", ReplyAction="http://tempuri.org/IFriendshipService/RemoveFriendshipResponse")]
        System.Threading.Tasks.Task RemoveFriendshipAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipService/GetFriendship", ReplyAction="http://tempuri.org/IFriendshipService/GetFriendshipResponse")]
        ImageSharing.DAL.Entity.Friendship GetFriendship(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipService/GetFriendship", ReplyAction="http://tempuri.org/IFriendshipService/GetFriendshipResponse")]
        System.Threading.Tasks.Task<ImageSharing.DAL.Entity.Friendship> GetFriendshipAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipService/GetFriendships", ReplyAction="http://tempuri.org/IFriendshipService/GetFriendshipsResponse")]
        ImageSharing.DAL.Entity.Friendship[] GetFriendships();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipService/GetFriendships", ReplyAction="http://tempuri.org/IFriendshipService/GetFriendshipsResponse")]
        System.Threading.Tasks.Task<ImageSharing.DAL.Entity.Friendship[]> GetFriendshipsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendshipServiceChannel : ImageSharing.FriendshipService.IFriendshipService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendshipServiceClient : System.ServiceModel.ClientBase<ImageSharing.FriendshipService.IFriendshipService>, ImageSharing.FriendshipService.IFriendshipService {
        
        public FriendshipServiceClient() {
        }
        
        public FriendshipServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendshipServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendshipServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendshipServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddFriendship(ImageSharing.DAL.Entity.Friendship friendship) {
            base.Channel.AddFriendship(friendship);
        }
        
        public System.Threading.Tasks.Task AddFriendshipAsync(ImageSharing.DAL.Entity.Friendship friendship) {
            return base.Channel.AddFriendshipAsync(friendship);
        }
        
        public void RemoveFriendship(int id) {
            base.Channel.RemoveFriendship(id);
        }
        
        public System.Threading.Tasks.Task RemoveFriendshipAsync(int id) {
            return base.Channel.RemoveFriendshipAsync(id);
        }
        
        public ImageSharing.DAL.Entity.Friendship GetFriendship(int id) {
            return base.Channel.GetFriendship(id);
        }
        
        public System.Threading.Tasks.Task<ImageSharing.DAL.Entity.Friendship> GetFriendshipAsync(int id) {
            return base.Channel.GetFriendshipAsync(id);
        }
        
        public ImageSharing.DAL.Entity.Friendship[] GetFriendships() {
            return base.Channel.GetFriendships();
        }
        
        public System.Threading.Tasks.Task<ImageSharing.DAL.Entity.Friendship[]> GetFriendshipsAsync() {
            return base.Channel.GetFriendshipsAsync();
        }
    }
}
