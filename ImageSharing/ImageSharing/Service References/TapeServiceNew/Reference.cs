//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImageSharing.TapeServiceNew {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TapeServiceNew.ITapeServiceNew")]
    public interface ITapeServiceNew {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapeServiceNew/GetTape", ReplyAction="http://tempuri.org/ITapeServiceNew/GetTapeResponse")]
        ImageSharing.DAL.EntityNew.Tape GetTape(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapeServiceNew/GetTape", ReplyAction="http://tempuri.org/ITapeServiceNew/GetTapeResponse")]
        System.Threading.Tasks.Task<ImageSharing.DAL.EntityNew.Tape> GetTapeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapeServiceNew/GetTapes", ReplyAction="http://tempuri.org/ITapeServiceNew/GetTapesResponse")]
        ImageSharing.DAL.EntityNew.Tape[] GetTapes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapeServiceNew/GetTapes", ReplyAction="http://tempuri.org/ITapeServiceNew/GetTapesResponse")]
        System.Threading.Tasks.Task<ImageSharing.DAL.EntityNew.Tape[]> GetTapesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapeServiceNew/AddTape", ReplyAction="http://tempuri.org/ITapeServiceNew/AddTapeResponse")]
        void AddTape(ImageSharing.DAL.EntityNew.Tape tape);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapeServiceNew/AddTape", ReplyAction="http://tempuri.org/ITapeServiceNew/AddTapeResponse")]
        System.Threading.Tasks.Task AddTapeAsync(ImageSharing.DAL.EntityNew.Tape tape);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapeServiceNew/RemoveTape", ReplyAction="http://tempuri.org/ITapeServiceNew/RemoveTapeResponse")]
        void RemoveTape(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapeServiceNew/RemoveTape", ReplyAction="http://tempuri.org/ITapeServiceNew/RemoveTapeResponse")]
        System.Threading.Tasks.Task RemoveTapeAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITapeServiceNewChannel : ImageSharing.TapeServiceNew.ITapeServiceNew, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TapeServiceNewClient : System.ServiceModel.ClientBase<ImageSharing.TapeServiceNew.ITapeServiceNew>, ImageSharing.TapeServiceNew.ITapeServiceNew {
        
        public TapeServiceNewClient() {
        }
        
        public TapeServiceNewClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TapeServiceNewClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TapeServiceNewClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TapeServiceNewClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ImageSharing.DAL.EntityNew.Tape GetTape(int id) {
            return base.Channel.GetTape(id);
        }
        
        public System.Threading.Tasks.Task<ImageSharing.DAL.EntityNew.Tape> GetTapeAsync(int id) {
            return base.Channel.GetTapeAsync(id);
        }
        
        public ImageSharing.DAL.EntityNew.Tape[] GetTapes() {
            return base.Channel.GetTapes();
        }
        
        public System.Threading.Tasks.Task<ImageSharing.DAL.EntityNew.Tape[]> GetTapesAsync() {
            return base.Channel.GetTapesAsync();
        }
        
        public void AddTape(ImageSharing.DAL.EntityNew.Tape tape) {
            base.Channel.AddTape(tape);
        }
        
        public System.Threading.Tasks.Task AddTapeAsync(ImageSharing.DAL.EntityNew.Tape tape) {
            return base.Channel.AddTapeAsync(tape);
        }
        
        public void RemoveTape(int id) {
            base.Channel.RemoveTape(id);
        }
        
        public System.Threading.Tasks.Task RemoveTapeAsync(int id) {
            return base.Channel.RemoveTapeAsync(id);
        }
    }
}
